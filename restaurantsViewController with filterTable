var allFilters = [...]
var selectedFilters = [String]()
var menuShowing = false

@IBOutlet weak var menuView: UIView!
@IBOutlet weak var trailingConstraint: NSLayoutConstraint!

@IBAction func openFilters(_ sender: Any) {
  if menuShowing {
    trailingConstraint.constant = menuView.width
  } else {
    trailingConstraint.constant = 0
    UIView.animate(withDuration: 0.3, animations: {self.menuView.layoutIfNeeded()}
  }
  menuShowing = !menuShowing
}

override func viewDidLoad() {
  super.viewDidLoad()  
  menuView.layer.shadowOpacity = 1  
}

func tableView: UITableView, numberOfRowsInSection section: Int) -> Int {    	
  return allFilters.count  	
}

func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {    	
  let cell = tableView.dequeueReusableIdentifier("filterCell", forIndexPath: indexPath)    	
  cell.textLabel?.text = allFilters[indexPath.row].name    	
  return cell  	
}

func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
  if tableView.cellForRow(at: indexPath)?.accessoryType == UITableViewCellAccessoryType.none {
    tableView.cellForRow(at: indexPath)?.accessoryType = UITableViewCellAccessoryType.checkmark
    selectedFilters.append(allFilters[indexPath.row])
  }  	
  else if tableView.cellForRow(at: indexPath)?.accessoryType == UITableViewCellAccessoryType.checkmark { 		
    tableView.cellForRow(at: indexPath)?.accessoryType = UITableViewCellAccessoryType.none 		
    selectedFilters.remove(at: selectedFilters.index(of: allFilters[indexPath.row]))
  } 
  restaurants = filters()
  restaurantsTable.reloadData()
}

func filter() -> [Restaurant] {
  var tempList = allRestaurants  
  for fil in selectedFilters {
    if fil.contains("$") {
      tempList = tempList.filter() {$0.price == fil}    
    } else {      
      tempList = tempList.filter() {$0.type.contains {$0 == fil}}    
    }  
  }  
  return tempList
}







